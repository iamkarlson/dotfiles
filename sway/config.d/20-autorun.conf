# -*- mode: i3wm-config -*-
#
workspace number 1

# Notification Daemon
exec_always "pkill swaync; swaync"
#exec swaync

exec swaykbdd

exec swww-daemon

exec "/usr/lib/polkit-kde-authentication-agent-1"


exec_always "pkill kanshi; kanshi &> /tmp/kanshi.log"

exec swww-daemon

exec "/usr/lib/polkit-kde-authentication-agent-1"

# Turn on keyboard backlight
exec brightnessctl --device='tpacpi::kbd_backlight' set 2

exec blueman-manager

# Clipboard manager between windows for Wayland
# Otherwise clipboard content will be gone once window is closed
exec wl-paste -t text --watch clipman store --no-persist


set $nag exec swaynagmode

#exec_always --no-startup-id workstyle &> /tmp/workstyle.log
#exec_always "pkill sworkstyle; sworkstyle &> /tmp/sworkstyle.log"
exec sworkstyle &> /tmp/sworkstyle.log

exec dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=sway


exec keepassxc

exec thunderbird

# Emacs is horrible. Every attempt to make it better is huge pain in the ass.
# It starts so long, and it affects how you can use it in a desktop environment like mine.
# To make working a bit closer to a normal human like behavior,
# it's a good idea to run it as a daemon and then use emacsclient to attach to an existing server.
# It gives you options like keeping unsaved documents in the memory even if the window is closed.
# Or have only one window and open files in this existing window.
# In emacs normal desktop windows are called `frames`.
# So what you can do is to run emacs as a systemd service.
# This service is already coming with an arch package. So you just turn it on:
# ❯ systemctl --user enable emacs.service
# Actually, you also need to put (server-start) in your emacs config.
#
# Then you look into emacsclient and read this
# ❯ emacsclient --help
# Usage: emacsclient [OPTIONS] FILE...
# Tell the Emacs server to visit the specified files.
# Every FILE can be either just a FILENAME or [+LINE[:COLUMN]] FILENAME.
#
# The following OPTIONS are accepted:
# .................................
# -r, --reuse-frame	Create a new frame if none exists, otherwise
# 			use the current Emacs frame
#
# `Reuse frame` is exactly what I need! And it should just *work*.
# But it fucking doesn't.
# Instead of reusing the frame this little bitch creating a new window every darn time.
# If you would debug it further, you can notice that it actually works but only if you start a service manually.
# Why? I have no fucking clue. However, this hack below solves my problem:
exec systemctl --user start emacs.service
# Now, when I open sway, I can run `emacsclient -r -a "" -n $FILE>/dev/null 2>/dev/null &`
# and it will open a file in an existing window.
